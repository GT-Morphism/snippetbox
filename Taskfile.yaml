# https://taskfile.dev

version: "3"

output: prefixed

vars:
  APPS_DIR: apps
  SECRETS_DIR: secrets
  ENCRYPTED_SECRETS_FILE: db.secrets.enc.yaml
  DECRYPTED_SECRETS_FILE: "{{.SECRETS_DIR}}/db.secrets.yaml"

tasks:
  dev:
    deps: [dev:api, dev:web]

  dev:api:
    desc: "Runs Go backend with live reload using air"
    dir: "{{.APPS_DIR}}/api"
    cmd: air .

  dev:web:
    desc: "Runs dev server for SvelteKit frontend"
    dir: "{{.APPS_DIR}}/web"
    cmd: pnpm dev

  sops:encrypt:
    desc: Encrypts secrets
    dir: "{{.APPS_DIR}}/api"
    cmds:
      - rm -f {{.ENCRYPTED_SECRETS_FILE}}
      - sops --encrypt --output={{.ENCRYPTED_SECRETS_FILE}} {{.DECRYPTED_SECRETS_FILE}}
    preconditions:
      - test -f {{.DECRYPTED_SECRETS_FILE}}

  sops:decrypt:
    desc: Decrypts secrets
    dir: "{{.APPS_DIR}}/api"
    cmds:
      - sops --decrypt {{.ENCRYPTED_SECRETS_FILE}} > {{.DECRYPTED_SECRETS_FILE}}
    preconditions:
      - test -f {{.ENCRYPTED_SECRETS_FILE}}
      - msg: No encrypted file present to decrpyt; try running `sops:encrypt` first.

  db:prepare-secrets:
    desc: Decrypts secrets file, creates txt files and removes decrypted secrets
    dir: "{{.APPS_DIR}}/api"
    cmds:
      - mkdir -p {{.SECRETS_DIR}}
      - task: sops:decrypt
      - task: db:create-secret-files
      - rm -f {{.DECRYPTED_SECRETS_FILE}}

  db:create-secret-files:
    internal: true
    dir: "{{.APPS_DIR}}/api"
    cmds:
      - grep "POSTGRES_USER" {{.DECRYPTED_SECRETS_FILE}} | cut -d":" -f2 | tr -d "[:space:]" > {{.SECRETS_DIR}}/db_user.txt
      - grep "POSTGRES_DB" {{.DECRYPTED_SECRETS_FILE}} | cut -d":" -f2 | tr -d "[:space:]" > {{.SECRETS_DIR}}/db_name.txt
      - grep "POSTGRES_PASSWORD" {{.DECRYPTED_SECRETS_FILE}} | cut -d":" -f2 | tr -d "[:space:]" > {{.SECRETS_DIR}}/db_password.txt
      - grep "APP_USER" {{.DECRYPTED_SECRETS_FILE}} | cut -d":" -f2 | tr -d "[:space:]" > {{.SECRETS_DIR}}/app_user.txt
      - grep "APP_PASSWORD" {{.DECRYPTED_SECRETS_FILE}} | cut -d":" -f2 | tr -d "[:space:]" > {{.SECRETS_DIR}}/app_password.txt

  db:start:
    desc: Starts postgres with secrets
    dir: "{{.APPS_DIR}}/api"
    deps: [db:prepare-secrets]
    cmds:
      - docker compose up -d db
